## ForceFeedback wheel decoder

import sigrokdecode as srd

RX = 0
TX = 1

COMMANDS = (
    (0, [0xA5, 0x0D], ['Main','Mn','M']),
    (0, [0xA5, 0x03], ['Secondary','Scnd','S']),
        
    (1, [0xA5, 0x0A, 0x00, 0x01, 0x01, 0x00], ['Apply','App','A']),
    (1, [0xA5, 0x09, 0x01], ['Clear','Clr','C']),
    
    (1, [0xA5, 0x08, 0x82, 0x01, 0xF4, 0xFF, 0xFF, 0x05, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00], ['20 Hz']),
    (1, [0xA5, 0x08, 0x84, 0x01, 0x54, 0x2C, 0x2C, 0x05, 0x65, 0x00, 0x00, 0x5A, 0x00, 0x96], ['Bump']),
    (1, [0xA5, 0x08, 0x82, 0x01, 0x54, 0x90, 0x90, 0x0A, 0x7E, 0x00, 0x06, 0x96, 0x00, 0x96], ['Change road']),
    (1, [0xA5, 0x08, 0x88, 0x01, 0xF1, 0xFF, 0xFF, 0x00, 0x65, 0x65, 0x7E, 0x7E, 0x00, 0x00], ['On ice']),
    (1, [0xA5, 0x08, 0x87, 0x01, 0xF1, 0xFF, 0xFF, 0x00, 0x7E, 0x7E, 0x7E, 0x7E, 0x09, 0x00], ['Hard turn']),
    (1, [0xA5, 0x08, 0x80, 0x01, 0x04, 0x64, 0x64, 0x0A, 0x65, 0x00, 0x7E, 0x08, 0x65, 0x00], ['Side force']),
    (1, [0xA5, 0x08, 0x80, 0x01, 0xFC, 0xFF, 0xFF, 0x0A, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00], ['Pull right']),
    (1, [0xA5, 0x08, 0x80, 0x01, 0xF4, 0xFF, 0xFF, 0x0A, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00], ['Pull left']),
    (1, [0xA5, 0x08, 0x8A, 0x01, 0xF1, 0xFF, 0xFF, 0x00, 0x7E, 0x19, 0x7E, 0x7E, 0x00, 0x00], ['Hard rg']),
    (1, [0xA5, 0x08, 0x88, 0x01, 0xF1, 0xFF, 0xFF, 0x00, 0x7F, 0x7F, 0x4B, 0x4B, 0x09, 0x00], ['Hard st']),
    (1, [0xA5, 0x08, 0x85, 0x01, 0x54, 0xF4, 0xF4, 0x0C, 0x65, 0xCE, 0x00, 0x00, 0x00, 0x00], ['Diesel']),
    (1, [0xA5, 0x08, 0x88, 0x01, 0xF1, 0xFF, 0xFF, 0x00, 0x7F, 0x7F, 0x7E, 0x7E, 0x00, 0x00], ['Wheel off']),
    (1, [0xA5, 0x08, 0x84, 0x01, 0xF4, 0xE8, 0xE8, 0x02, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00], ['Engine idle']),
    (1, [0xA5, 0x08, 0x82, 0x01, 0x54, 0x2C, 0x2C, 0x11, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x5E], ['Choppy road']),
)

ROWS = (
    ('poll', 'Polling'),
    ('effect', 'Effect'),
)

UNKNOWN = ('unk', 'unknown', 'Unknown', ['Unknown: %s', 'Unknown', 'U'])


def bytes2string(bytes):
    return ''.join(['%02x' % e for e in bytes])

class Decoder(srd.Decoder):
    api_version = 3
    id = 'fcfdb'
    name = 'ForceFeedback'
    longname = 'Forcefeedback'
    desc = 'Forcefeedback.'
    license = 'gplv2+'
    inputs = ['uart']
    outputs = []
    tags = ['Game', 'PC']
    annotations = tuple((bytes2string(bytes),labels[0]) for _, bytes, labels in COMMANDS) + tuple(((UNKNOWN[1],UNKNOWN[2]),))
    annotation_rows = tuple((id, label, tuple((j for j, (command, _, _) in enumerate(COMMANDS) if command == i))) for i, (id, label) in enumerate(ROWS)) + tuple(((UNKNOWN[0], UNKNOWN[2], (len(COMMANDS),)),))

    def __init__(self):
        self.reset()

    def reset(self):
        self.cmd = []
        self.ss = None
        self.es = None

    def start(self):
        self.out_ann = self.register(srd.OUTPUT_ANN)
        
    def putdata(self, data):
        self.put(self.ss, self.es, self.out_ann, data)
        
    def putcmd(self):
        if len(self.cmd)<=0:
            return
        
        for i, (_, cmd, labels) in enumerate(COMMANDS):
            if cmd == self.cmd:
                self.putdata([i, labels])
                break
        else:
            self.putdata([len(COMMANDS), [UNKNOWN[3][0] % bytes2string(self.cmd), UNKNOWN[3][1], UNKNOWN[3][2]]])
        
        self.cmd = []

    def decode(self, ss, es, data):
        ptype, rxtx, pdata = data

        # For now, ignore all UART packets except the actual data packets.
        if ptype != 'DATA':
            return

        # We're only interested in the byte value (not individual bits).
        pdata = pdata[0]
        
        if pdata == 0xA5:
            self.putcmd()
            self.ss = ss
        
        self.cmd.append(pdata)
        self.es = es

